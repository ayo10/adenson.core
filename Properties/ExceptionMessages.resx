<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlgorithmNull" xml:space="preserve">
    <value>The Algorithm property is used for encryption and decryption, and cannot be null.</value>
  </data>
  <data name="AllowNullsFalseNulls" xml:space="preserve">
    <value>AllowNulls is set to false, so, collection should not have null values in it.</value>
  </data>
  <data name="ArgumentInListNull" xml:space="preserve">
    <value>None of the argument in the list can be null.</value>
  </data>
  <data name="ArgumentNull" xml:space="preserve">
    <value>Argument cannot be null.</value>
  </data>
  <data name="ArgumentNullOrEmpty" xml:space="preserve">
    <value>Argument cannot be null nor empty.</value>
  </data>
  <data name="CastToTypeException" xml:space="preserve">
    <value>Item cannot be cast to "{0}".</value>
  </data>
  <data name="ChangeTypeConfused" xml:space="preserve">
    <value>Confused ChangeType is, converting {0} to {1} not does it.</value>
  </data>
  <data name="CollectionsNoNullValues" xml:space="preserve">
    <value>The collection does not allow null values.</value>
  </data>
  <data name="CommandTextParse" xml:space="preserve">
    <value>Unable to parse the command text to automatically generate parameters, pass in appropriate command parameter objects instead.</value>
  </data>
  <data name="ConfigurationFileNotFound" xml:space="preserve">
    <value>File {0} does not exist at the application startup folder.</value>
  </data>
  <data name="ConnectionStringNotFound" xml:space="preserve">
    <value>No connection string with specified key '{0}' could be found. Check to make sure you have '{1}' or '{2}' in your application startup folder and it contains the specified key. Alternatively, check to make sure you have a connection string section in your configuration file with the specified key. In case you are still using ConnectionStrings.xml, sorry, you will have to rename it to one of the two file names mentioned previously.</value>
  </data>
  <data name="CustomEncryptorMissingAttributes" xml:space="preserve">
    <value>Custom Encryptors need atleast a 'TypeName' attribute, and maybe 'AssemblyName' attribute.</value>
  </data>
  <data name="EmailAddressInvalid" xml:space="preserve">
    <value>To email address cannot be null or empty.</value>
  </data>
  <data name="EventLogTypeWithSourceNull" xml:space="preserve">
    <value>Source cannot be null or empty if LogType contains LogType.EventLog.</value>
  </data>
  <data name="KeyDuplicates" xml:space="preserve">
    <value>Key duplicates not allowed.</value>
  </data>
  <data name="LoggerNoConnString" xml:space="preserve">
    <value>Could not find a connection string to use to spit out events to database.</value>
  </data>
  <data name="LoggerSimpleKeyValueConfigSetCyclic" xml:space="preserve">
    <value>Sorry, mister developer, cyclic depedency, logger depends on SimpleKeyValueConfigSet.</value>
  </data>
  <data name="MailNoTemplateForId" xml:space="preserve">
    <value>Could not find matching templates for the specified template id.</value>
  </data>
  <data name="MailTemplateFailed" xml:space="preserve">
    <value>Error creating email from template.</value>
  </data>
  <data name="NoCommandParameter" xml:space="preserve">
    <value>There are no parameter values in the command text.</value>
  </data>
  <data name="NoEncryptorExists" xml:space="preserve">
    <value>No encryptor with that key exists.</value>
  </data>
  <data name="ParameterCountMismatch" xml:space="preserve">
    <value>The number of parameters and the number of parameter values are not the same.</value>
  </data>
  <data name="SectionNotDictionarySection" xml:space="preserve">
    <value>The section is not of DictionarySectionHandler.</value>
  </data>
  <data name="SqlImplWrongType" xml:space="preserve">
    <value>This is a {0} implementation, what are you doing passing in a non {0} object.</value>
  </data>
</root>